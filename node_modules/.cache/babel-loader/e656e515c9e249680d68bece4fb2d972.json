{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _objectSpread from\"/Users/kassim.assani/playground/extra-custom-demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/kassim.assani/playground/extra-custom-demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useReducer}from'react';export default(function(reducer,actions,defaultValue){var Context=/*#__PURE__*/React.createContext();var Provider=function Provider(_ref){var children=_ref.children;var _useReducer=useReducer(reducer,defaultValue),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];var boundAction={};for(var key in actions){boundAction[key]=actions[key](dispatch);}return/*#__PURE__*/_jsx(Context.Provider,{value:_objectSpread({state:state},boundAction),children:children});};return{Context:Context,Provider:Provider};});","map":{"version":3,"sources":["/Users/kassim.assani/playground/extra-custom-demo2/src/context/CreateContext.js"],"names":["React","useReducer","reducer","actions","defaultValue","Context","createContext","Provider","children","state","dispatch","boundAction","key"],"mappings":"4XAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CAEA,eAAe,SAACC,OAAD,CAAUC,OAAV,CAAmBC,YAAnB,CAAoC,CACjD,GAAMC,CAAAA,OAAO,cAAGL,KAAK,CAACM,aAAN,EAAhB,CACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,iBACPP,UAAU,CAACC,OAAD,CAAUE,YAAV,CADH,4CAC1BK,KAD0B,iBACnBC,QADmB,iBAEjC,GAAMC,CAAAA,WAAW,CAAG,EAApB,CACA,IAAK,GAAIC,CAAAA,GAAT,GAAgBT,CAAAA,OAAhB,CAAyB,CACvBQ,WAAW,CAACC,GAAD,CAAX,CAAmBT,OAAO,CAACS,GAAD,CAAP,CAAaF,QAAb,CAAnB,CACD,CACD,mBACE,KAAC,OAAD,CAAS,QAAT,EAAkB,KAAK,gBAAID,KAAK,CAALA,KAAJ,EAAcE,WAAd,CAAvB,UACGH,QADH,EADF,CAKD,CAXD,CAYA,MAAO,CAAEH,OAAO,CAAPA,OAAF,CAAWE,QAAQ,CAARA,QAAX,CAAP,CACD,CAfD","sourcesContent":["import React, { useReducer } from 'react';\n\nexport default (reducer, actions, defaultValue) => {\n  const Context = React.createContext();\n  const Provider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, defaultValue);\n    const boundAction = {};\n    for (let key in actions) {\n      boundAction[key] = actions[key](dispatch);\n    }\n    return (\n      <Context.Provider value={{ state, ...boundAction }}>\n        {children}\n      </Context.Provider>\n    );\n  };\n  return { Context, Provider };\n};\n"]},"metadata":{},"sourceType":"module"}